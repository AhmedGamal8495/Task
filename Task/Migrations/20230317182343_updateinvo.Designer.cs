// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Task.Models;

#nullable disable

namespace Task.Migrations
{
    [DbContext(typeof(NwcContext))]
    [Migration("20230317182343_updateinvo")]
    partial class updateinvo
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Task.Models.NwcDefaultSliceValue", b =>
                {
                    b.Property<string>("NwcDefaultSliceValuesCode")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("NWC_Default_Slice_Values_Code")
                        .IsFixedLength();

                    b.Property<int>("NwcDefaultSliceValuesCondtion")
                        .HasColumnType("int")
                        .HasColumnName("NWC_Default_Slice_Values_Condtion");

                    b.Property<string>("NwcDefaultSliceValuesName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NWC_Default_Slice_Values_Name");

                    b.Property<string>("NwcDefaultSliceValuesReasons")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NWC_Default_Slice_Values_Reasons");

                    b.Property<decimal>("NwcDefaultSliceValuesSanitationPrice")
                        .HasColumnType("decimal(6, 2)")
                        .HasColumnName("NWC_Default_Slice_Values_Sanitation_Price");

                    b.Property<decimal>("NwcDefaultSliceValuesWaterPrice")
                        .HasColumnType("decimal(6, 2)")
                        .HasColumnName("NWC_Default_Slice_Values_Water_Price");

                    b.HasKey("NwcDefaultSliceValuesCode");

                    b.ToTable("NWC_Default_Slice_Values", (string)null);
                });

            modelBuilder.Entity("Task.Models.NwcInvoice", b =>
                {
                    b.Property<string>("NwcInvoicesNo")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("NWC_Invoices_No")
                        .IsFixedLength();

                    b.Property<int>("NwcInvoicesAmountConsumption")
                        .HasColumnType("int")
                        .HasColumnName("NWC_Invoices_Amount_Consumption");

                    b.Property<decimal>("NwcInvoicesConsumptionValue")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("NWC_Invoices_Consumption_Value");

                    b.Property<int>("NwcInvoicesCurrentConsumptionAmount")
                        .HasColumnType("int")
                        .HasColumnName("NWC_Invoices_Current_Consumption_Amount");

                    b.Property<DateTime>("NwcInvoicesDate")
                        .HasColumnType("date")
                        .HasColumnName("NWC_Invoices_Date");

                    b.Property<DateTime>("NwcInvoicesFrom")
                        .HasColumnType("date")
                        .HasColumnName("NWC_Invoices_From");

                    b.Property<bool>("NwcInvoicesIsThereSanitation")
                        .HasColumnType("bit")
                        .HasColumnName("NWC_Invoices_Is_ There_Sanitation");

                    b.Property<int>("NwcInvoicesPreviousConsumptionAmount")
                        .HasColumnType("int")
                        .HasColumnName("NWC_Invoices_Previous_Consumption_Amount");

                    b.Property<string>("NwcInvoicesRrealEstateTypes")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("NWC_Invoices_Rreal_Estate_Types")
                        .IsFixedLength();

                    b.Property<decimal>("NwcInvoicesServiceFee")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("NWC_Invoices_Service_Fee");

                    b.Property<string>("NwcInvoicesSubscriberNo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("NWC_Invoices_Subscriber_No")
                        .IsFixedLength();

                    b.Property<string>("NwcInvoicesSubscriptionNo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("NWC_Invoices_Subscription_No")
                        .IsFixedLength();

                    b.Property<decimal>("NwcInvoicesTaxRate")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("NWC_Invoices_Tax_Rate");

                    b.Property<decimal>("NwcInvoicesTaxValue")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("NWC_Invoices_Tax_Value");

                    b.Property<DateTime>("NwcInvoicesTo")
                        .HasColumnType("date")
                        .HasColumnName("NWC_Invoices_To");

                    b.Property<decimal>("NwcInvoicesTotalBill")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("NWC_Invoices_Total_Bill");

                    b.Property<decimal>("NwcInvoicesTotalInvoice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("NWC_Invoices_Total_Invoice");

                    b.Property<string>("NwcInvoicesTotalReasons")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NWC_Invoices_Total_Reasons");

                    b.Property<decimal>("NwcInvoicesWastewaterConsumptionValue")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("NWC_Invoices_Wastewater_Consumption_Value");

                    b.Property<string>("NwcInvoicesYear")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .HasColumnName("NWC_Invoices_Year")
                        .IsFixedLength();

                    b.HasKey("NwcInvoicesNo");

                    b.HasIndex("NwcInvoicesRrealEstateTypes");

                    b.HasIndex("NwcInvoicesSubscriberNo");

                    b.HasIndex("NwcInvoicesSubscriptionNo");

                    b.ToTable("NWC_Invoices", (string)null);
                });

            modelBuilder.Entity("Task.Models.NwcRrealEstateType", b =>
                {
                    b.Property<string>("NwcRrealEstateTypesCode")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("NWC_Rreal_Estate_Types_Code")
                        .IsFixedLength();

                    b.Property<string>("NwcRrealEstateTypesName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("NWC_Rreal_Estate_Types_Name");

                    b.Property<string>("NwcRrealEstateTypesReasons")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NWC_Rreal_Estate_Types_Reasons");

                    b.HasKey("NwcRrealEstateTypesCode");

                    b.ToTable("NWC_Rreal_Estate_Types", (string)null);
                });

            modelBuilder.Entity("Task.Models.NwcSubscriberFile", b =>
                {
                    b.Property<string>("NwcSubscriberFileId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("NWC_Subscriber_File_Id")
                        .IsFixedLength();

                    b.Property<string>("NwcSubscriberFileArea")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NWC_Subscriber_File_Area");

                    b.Property<string>("NwcSubscriberFileCity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NWC_Subscriber_File_City");

                    b.Property<string>("NwcSubscriberFileMobile")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("NWC_Subscriber_File_Mobile");

                    b.Property<string>("NwcSubscriberFileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NWC_Subscriber_File_Name");

                    b.Property<string>("NwcSubscriberFileReasons")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NWC_Subscriber_File_Reasons");

                    b.HasKey("NwcSubscriberFileId");

                    b.ToTable("NWC_Subscriber_File", (string)null);
                });

            modelBuilder.Entity("Task.Models.NwcSubscriptionFile", b =>
                {
                    b.Property<string>("NwcSubscriptionFileNo")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("NWC_Subscription_File_No")
                        .IsFixedLength();

                    b.Property<bool>("NwcSubscriptionFileIsThereSanitation")
                        .HasColumnType("bit")
                        .HasColumnName("NWC_Subscription_File_Is_ There_Sanitation");

                    b.Property<int>("NwcSubscriptionFileLastReadingMeter")
                        .HasColumnType("int")
                        .HasColumnName("NWC_Subscription_File_Last_Reading_Meter");

                    b.Property<string>("NwcSubscriptionFileReasons")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NWC_Subscription_File_Reasons");

                    b.Property<string>("NwcSubscriptionFileRrealEstateTypesCode")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("NWC_Subscription_File_Rreal_Estate_Types_Code")
                        .IsFixedLength();

                    b.Property<string>("NwcSubscriptionFileSubscriberCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("NWC_Subscription_File_Subscriber_Code")
                        .IsFixedLength();

                    b.Property<int>("NwcSubscriptionFileUnitNo")
                        .HasColumnType("int")
                        .HasColumnName("NWC_Subscription_File_Unit_No");

                    b.HasKey("NwcSubscriptionFileNo");

                    b.HasIndex("NwcSubscriptionFileRrealEstateTypesCode");

                    b.HasIndex("NwcSubscriptionFileSubscriberCode");

                    b.ToTable("NWC_Subscription_File", (string)null);
                });

            modelBuilder.Entity("Task.Models.NwcInvoice", b =>
                {
                    b.HasOne("Task.Models.NwcRrealEstateType", "NwcInvoicesRrealEstateTypesNavigation")
                        .WithMany("NwcInvoices")
                        .HasForeignKey("NwcInvoicesRrealEstateTypes")
                        .IsRequired()
                        .HasConstraintName("FK_NWC_Invoices_NWC_Rreal_Estate_Types");

                    b.HasOne("Task.Models.NwcSubscriberFile", "NwcInvoicesSubscriberNoNavigation")
                        .WithMany("NwcInvoices")
                        .HasForeignKey("NwcInvoicesSubscriberNo")
                        .IsRequired()
                        .HasConstraintName("FK_NWC_Invoices_NWC_Subscriber_File");

                    b.HasOne("Task.Models.NwcSubscriptionFile", "NwcInvoicesSubscriptionNoNavigation")
                        .WithMany("NwcInvoices")
                        .HasForeignKey("NwcInvoicesSubscriptionNo")
                        .IsRequired()
                        .HasConstraintName("FK_NWC_Invoices_NWC_Subscription_File");

                    b.Navigation("NwcInvoicesRrealEstateTypesNavigation");

                    b.Navigation("NwcInvoicesSubscriberNoNavigation");

                    b.Navigation("NwcInvoicesSubscriptionNoNavigation");
                });

            modelBuilder.Entity("Task.Models.NwcSubscriptionFile", b =>
                {
                    b.HasOne("Task.Models.NwcRrealEstateType", "NwcSubscriptionFileRrealEstateTypesCodeNavigation")
                        .WithMany("NwcSubscriptionFiles")
                        .HasForeignKey("NwcSubscriptionFileRrealEstateTypesCode")
                        .IsRequired()
                        .HasConstraintName("FK_NWC_Subscription_File_NWC_Rreal_Estate_Types");

                    b.HasOne("Task.Models.NwcSubscriberFile", "NwcSubscriptionFileSubscriberCodeNavigation")
                        .WithMany("NwcSubscriptionFiles")
                        .HasForeignKey("NwcSubscriptionFileSubscriberCode")
                        .IsRequired()
                        .HasConstraintName("FK_NWC_Subscription_File_NWC_Subscriber_File");

                    b.Navigation("NwcSubscriptionFileRrealEstateTypesCodeNavigation");

                    b.Navigation("NwcSubscriptionFileSubscriberCodeNavigation");
                });

            modelBuilder.Entity("Task.Models.NwcRrealEstateType", b =>
                {
                    b.Navigation("NwcInvoices");

                    b.Navigation("NwcSubscriptionFiles");
                });

            modelBuilder.Entity("Task.Models.NwcSubscriberFile", b =>
                {
                    b.Navigation("NwcInvoices");

                    b.Navigation("NwcSubscriptionFiles");
                });

            modelBuilder.Entity("Task.Models.NwcSubscriptionFile", b =>
                {
                    b.Navigation("NwcInvoices");
                });
#pragma warning restore 612, 618
        }
    }
}
